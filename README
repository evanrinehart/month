Month

The months form an affine space with integers as vectors between them.
They are also totally ordered and can be compared for equality.

Examples
m1 = Month.new(2014, 5)   ==> May 2014
m2 = m1 + 2               ==> July 2014
m2 - m1                   ==> 2
m2 < m1                   ==> false
m2 == m1 + (m2 - m1)      ==> true
m1.first_day              ==> Date.new(2014,5,1)
m1.last_day               ==> Date.new(2014,5,31)
m1.to_s :date => true     ==> "2014-05-01"
Month.parse("2014-03-01") ==> March 2014
Month.current             ==> May 2014


Class methods
new          : Integer, Integer 1..12 -> Month
month        : Month -> Integer 1..12
year         : Month -> Integer
to_s         : Month -> String
to_s         : Month, {:date=>true} -> String
show         : Month -> String
+            : Month, (count:Integer) -> Month
-            : Month, (count:Integer) -> Month
-            : Month, Month -> (count:Integer)
<=>          : Month, Month -> Ordering
==, !=       : Month, Month -> Bool
<, >, <=, >= : Month, Month -> Bool
first_day    : Month -> Date
last_day     : Month -> Date
on_day          : Month, Integer 1..28 -> Date
on_day_clamp    : Month, Integer 1..31 -> Date
on_day_rollover : Month, Integer 1..31 -> Date

Module methods
from_date : Date -> Month
current   : {Time} Month
parse     : {ParseError} String -> Month
try_parse : String -> Month | Nil

Exceptions
ParseError < StandardError
