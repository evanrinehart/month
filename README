Month

The months are a principal homogeneous space for the additive group of integers.

Since the months are not a group we cannot add elements; we can, however, take
their "difference". That is, there is a map - : M × M -> ℤ that sends (m1,m2)
to the unique element d = m1 - m2 ∈ ℤ such that m2 = m1 + d.
  -- Wikipedia with names changed

This idea is also called a Torsor

http://www.reddit.com/r/haskell/comments/166iju/subtractable_values_are_torsors/


Examples
m1 = Month.new(2014, 5)   ==> May 2014
m2 = m1 + 2               ==> July 2014
m2 - m1                   ==> 2
m2 < m1                   ==> false
m2 == m1 + (m2 - m1)      ==> true
m1.first_day              ==> Date.new(2014,5,1)
m1.last_day               ==> Date.new(2014,5,31)
m1.encode                 ==> "2014-05-01"
Month.parse("2014-03-01") ==> March 2014
Month::get_current        ==> May 2014


Module methods
  new             : Integer, Integer 1..12 -> Month
  from_date       : Date -> Month
  parse           : {ParseError} String -> Month
  try_parse       : String -> Month | Nil

Class methods
  month           : Month -> Integer 1..12
  year            : Month -> Integer
  to_s            : Month -> String
  encode          : Month -> String
  show            : Month -> String
  +               : Month, (diff:Integer) -> Month
  -               : Month, (diff:Integer) -> Month
  -               : Month, Month -> (diff:Integer)
  <=>             : Month, Month -> Ordering
  ==, !=          : Month, Month -> Bool
  <, >, <=, >=    : Month, Month -> Bool
  first_day       : Month -> Date
  last_day        : Month -> Date
  on_day          : Month, Integer 1..28 -> Date
  on_day_clamp    : Month, Integer 1..31 -> Date
  on_day_rollover : Month, Integer 1..31 -> Date

Commands o- SystemTime
  get_current :: Month

Exceptions
  ParseError < StandardError
